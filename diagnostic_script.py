"""
Script de diagnostic - V√©rification de la correction du bug top_k
================================================================
Ce script v√©rifie que le probl√®me avec top_k est bien r√©solu.
"""

import os
from dotenv import load_dotenv
from ia_provider import manager, APIError

# Charger les variables d'environnement
load_dotenv()


def diagnostic_gpt41():
    """Test de diagnostic pour GPT-4.1 avec top_k."""
    print("\n" + "=" * 60)
    print("DIAGNOSTIC: Test de GPT-4.1 avec param√®tres probl√©matiques")
    print("=" * 60)
    
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key:
        print("‚ö†Ô∏è  Cl√© API OpenAI non trouv√©e. Test ignor√©.")
        print("   Configurez OPENAI_API_KEY dans .env pour tester.")
        return False
    
    try:
        print("\n1. Test avec top_k dans les param√®tres...")
        provider = manager.get_provider("gpt-4.1", api_key)
        
        # Test qui causait l'erreur avant la correction
        response = provider.generer_reponse(
            "Dis juste 'OK' si tu re√ßois ce message",
            temperature=0.5,
            max_tokens=10,
            top_k=40,  # Param√®tre probl√©matique
            frequency_penalty=0,
            presence_penalty=0
        )
        
        print(f"   ‚úÖ Succ√®s! R√©ponse: {response}")
        print("   ‚Üí Le param√®tre top_k a √©t√© correctement filtr√©")
        
        # Test 2: V√©rifier que les autres param√®tres passent bien
        print("\n2. Test avec param√®tres valides...")
        response2 = provider.generer_reponse(
            "R√©ponds 'TEST' en majuscules",
            temperature=0.1,
            max_tokens=10,
            frequency_penalty=0.5,
            presence_penalty=0.5
        )
        
        print(f"   ‚úÖ Succ√®s! R√©ponse: {response2}")
        print("   ‚Üí Les param√®tres support√©s fonctionnent correctement")
        
        return True
        
    except APIError as e:
        if "top_k" in str(e):
            print(f"   ‚ùå √âCHEC: L'erreur top_k persiste!")
            print(f"   Erreur: {e}")
            print("\n   ‚ö†Ô∏è  Le filtrage des param√®tres ne fonctionne pas correctement.")
            return False
        else:
            print(f"   ‚ùå Erreur API diff√©rente: {e}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur inattendue: {e}")
        return False


def diagnostic_claude():
    """Test de diagnostic pour Claude Sonnet 4."""
    print("\n" + "=" * 60)
    print("DIAGNOSTIC: Test de Claude Sonnet 4 avec param√®tres")
    print("=" * 60)
    
    api_key = os.getenv("ANTHROPIC_API_KEY")
    
    if not api_key:
        print("‚ö†Ô∏è  Cl√© API Anthropic non trouv√©e. Test ignor√©.")
        print("   Configurez ANTHROPIC_API_KEY dans .env pour tester.")
        return False
    
    try:
        print("\n1. Test avec param√®tres non support√©s...")
        provider = manager.get_provider("claude-sonnet-4", api_key)
        
        # Test avec param√®tres qui devraient √™tre filtr√©s
        response = provider.generer_reponse(
            "R√©ponds simplement 'OK'",
            temperature=0.5,
            max_tokens=10,
            top_k=40,  # Non support√©
            frequency_penalty=0.5,  # Non support√©
            presence_penalty=0.5  # Non support√©
        )
        
        print(f"   ‚úÖ Succ√®s! R√©ponse: {response}")
        print("   ‚Üí Les param√®tres non support√©s ont √©t√© filtr√©s")
        
        # Test 2: Mode thinking
        print("\n2. Test du mode thinking...")
        response2 = provider.generer_reponse(
            "Calcule 2+2 et explique",
            thinking_budget=100,
            max_tokens=50
        )
        
        print(f"   ‚úÖ Succ√®s! R√©ponse: {response2[:50]}...")
        print("   ‚Üí Le mode thinking fonctionne")
        
        return True
        
    except APIError as e:
        print(f"   ‚ùå Erreur API: {e}")
        if any(param in str(e) for param in ['top_k', 'frequency_penalty', 'presence_penalty']):
            print("   ‚ö†Ô∏è  Des param√®tres non support√©s n'ont pas √©t√© filtr√©s!")
        return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur inattendue: {e}")
        return False


def main():
    """Fonction principale de diagnostic."""
    print("\n" + "üîç " * 20)
    print("DIAGNOSTIC DU MODULE IA_PROVIDER")
    print("V√©rification de la correction du bug 'top_k'")
    print("üîç " * 20)
    
    # V√©rifier les mod√®les disponibles
    print("\nüìã Mod√®les disponibles:")
    models = manager.get_available_models()
    for model in models:
        print(f"   ‚Ä¢ {model}")
    
    # Tests de diagnostic
    results = []
    
    # Test GPT-4.1
    gpt_ok = diagnostic_gpt41()
    results.append(("GPT-4.1", gpt_ok))
    
    # Test Claude
    claude_ok = diagnostic_claude()
    results.append(("Claude Sonnet 4", claude_ok))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("R√âSUM√â DU DIAGNOSTIC")
    print("=" * 60)
    
    for model, status in results:
        if status is None:
            continue
        emoji = "‚úÖ" if status else "‚ùå"
        print(f"{emoji} {model}: {'OK' if status else 'PROBL√àME D√âTECT√â'}")
    
    # Conclusion
    all_ok = all(status != False for _, status in results)
    
    if all_ok:
        print("\nüéâ SUCC√àS: Le probl√®me 'top_k' est corrig√©!")
        print("   Les param√®tres non support√©s sont bien filtr√©s.")
    else:
        print("\n‚ö†Ô∏è  ATTENTION: Des probl√®mes ont √©t√© d√©tect√©s.")
        print("   V√©rifiez l'impl√©mentation du filtrage des param√®tres.")
    
    print("\n" + "=" * 60)


if __name__ == "__main__":
    main()